%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Probdata
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pdata = Probdata; %Specify the class
pdata.name = {'mu1','mu2'};

pdata.marg =  [  1   5   0.3 1;
                 1   5   0.3 1;
              ];
          
pdata = set_numbers(pdata, pdata.marg);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Optimizer settings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Opt_set = Optimizer;
Opt_set.constraint = [-100; -100; 100; 100];
Opt_set.dp_x = [5;5];
Opt_set.dp_u = U_space([ 5; 5], pdata.marg(:,2), pdata.marg(:,3));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Functions, Obj and Limitstate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

obj = Limitstate;
obj.expression = {'mu1+mu2'};
obj.nominal_u = 

G1 = Limitstate;
G2 = Limitstate;
G3 = Limitstate;

G1.target_beta = 2;
G2.target_beta = G1.target_beta;
G3.target_beta = G2.target_beta;
obj.target_beta = G3.target_beta; % Scales the Roc, but its linear so size doesent matter.

G1.expression = {'mu1^2*mu2/20-1'};
G2.expression = {'(mu1+mu2-5)^2/30+(mu1-mu2-12)^2/120-1'};
G3.expression = {'80/(mu1^2+8*mu2+5)-1'};

LS = [G1, G2, G3];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% General settings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

RBDO_s = Rbdo_settings;
RBDO_s.name = 'YounChoi';
RBDO_s.f_one_probe = 1;
RBDO_s.convl = 2; % REMOVE
RBDO_s.doe_scale = 2; % REMOVE
RBDO_s.default_step_t = 10; % defult max step % REMOVE 
RBDO_s.scale_RoC = 100; % REMOVE
RBDO_s.Roc = 100; % REMOVE
RBDO_s.max_step = 	100;